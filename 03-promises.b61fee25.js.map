{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SAChCC,EAAW,GAEfH,EAAKI,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAEC,iBACF,IAEmBC,EAAfF,EAAEG,cADJC,SAAYC,EAAKH,EAALG,MAAOC,EAAIJ,EAAJI,MAQvB,SAA0BC,GACxB,IAAK,IAAIC,EAAI,EAAGA,GAAKD,EAAQC,GAAK,EAChCV,EAASW,KAAKD,E,EARhBE,CAFiCR,EAANK,OAEHI,OAY1B,SAA2BN,EAAOC,GAChCR,EAASc,KAAI,SAAAC,IAYf,SAAuBC,EAAUT,GAC/B,IAAMU,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEL,WAAUT,UAEpBe,EAAO,CAAEN,WAAUT,S,GAEpBA,E,KAnBHiB,CAAcT,EADIU,OAAOlB,IAAUQ,EAAK,GAAKU,OAAOjB,IAEjDkB,MAAK,SAAAC,G,IAAGX,EAAQW,EAARX,SAAUY,EAAKD,EAALpB,MACjBZ,EAAAkC,OAAOC,QAAQ,uBAAwCC,OAAff,EAAS,QAAYe,OAANH,EAAM,M,IAE9DI,OAAM,SAAAL,G,IAAGX,EAAQW,EAARX,SAAUY,EAAKD,EAALpB,MAClBZ,EAAAkC,OAAOI,QAAQ,sBAAqCF,OAAff,EAAS,QAAYe,OAANH,EAAM,M,OAnBhEM,CAAkB3B,EAAMM,MAAOL,EAAKK,OACpCX,EAAEG,cAAc8B,QAChBnC,EAAW,E","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst form = document.querySelector('.form');\nlet promises = [];\n\nform.addEventListener('submit', onFormSabmit);\n\nfunction onFormSabmit(e) {\n  e.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = e.currentTarget;\n  getPromisesArray(amount.value);\n  getCreatePromises(delay.value, step.value);\n  e.currentTarget.reset();\n  promises = [];\n}\n\nfunction getPromisesArray(amount) {\n  for (let i = 1; i <= amount; i += 1) {\n    promises.push(i);\n  }\n}\n\nfunction getCreatePromises(delay, step) {\n  promises.map(el => {\n    const stepDelay = Number(delay) + (el - 1) * Number(step);\n    createPromise(el, stepDelay)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n  });\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$promises","addEventListener","e","preventDefault","_elements","currentTarget","elements","delay","step","amount","i","push","$ce04d3a99e08e73b$var$getPromisesArray","value","map","el","position","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","$ce04d3a99e08e73b$var$createPromise","Number","then","param","_$delay","Notify","success","concat","catch","failure","$ce04d3a99e08e73b$var$getCreatePromises","reset"],"version":3,"file":"03-promises.b61fee25.js.map"}